// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: order.sql

package sqlc

import (
	"context"
	"database/sql"
)

const countByID = `-- name: CountByID :one
SELECT COUNT(*)
FROM orders
WHERE ref_id = $1
`

func (q *Queries) CountByID(ctx context.Context, refID string) (int64, error) {
	row := q.db.QueryRowContext(ctx, countByID, refID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (ref_id, customer_id, username, product_id, quantity, status)
VALUES ($1, $2, $3, $4, $5, $6) RETURNING id, ref_id, customer_id, username, product_id, quantity, order_date, status, total_amount, created_at, updated_at
`

type CreateOrderParams struct {
	RefID      string `json:"ref_id"`
	CustomerID string `json:"customer_id"`
	Username   string `json:"username"`
	ProductID  string `json:"product_id"`
	Quantity   int32  `json:"quantity"`
	Status     string `json:"status"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, createOrder,
		arg.RefID,
		arg.CustomerID,
		arg.Username,
		arg.ProductID,
		arg.Quantity,
		arg.Status,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.RefID,
		&i.CustomerID,
		&i.Username,
		&i.ProductID,
		&i.Quantity,
		&i.OrderDate,
		&i.Status,
		&i.TotalAmount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findOrderByID = `-- name: FindOrderByID :one
SELECT id, ref_id, customer_id, username, product_id, quantity, order_date, status, total_amount, created_at, updated_at FROM orders WHERE id = $1 LIMIT 1
`

func (q *Queries) FindOrderByID(ctx context.Context, id int32) (Order, error) {
	row := q.db.QueryRowContext(ctx, findOrderByID, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.RefID,
		&i.CustomerID,
		&i.Username,
		&i.ProductID,
		&i.Quantity,
		&i.OrderDate,
		&i.Status,
		&i.TotalAmount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateOrder = `-- name: UpdateOrder :one
UPDATE orders
SET 
    status = $1,
    total_amount = $2,
    updated_at = CURRENT_TIMESTAMP
WHERE 
    ref_id = $3
RETURNING id, ref_id, customer_id, username, product_id, quantity, order_date, status, total_amount, created_at, updated_at
`

type UpdateOrderParams struct {
	Status      string          `json:"status"`
	TotalAmount sql.NullFloat64 `json:"total_amount"`
	RefID       string          `json:"ref_id"`
}

func (q *Queries) UpdateOrder(ctx context.Context, arg UpdateOrderParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, updateOrder, arg.Status, arg.TotalAmount, arg.RefID)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.RefID,
		&i.CustomerID,
		&i.Username,
		&i.ProductID,
		&i.Quantity,
		&i.OrderDate,
		&i.Status,
		&i.TotalAmount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
