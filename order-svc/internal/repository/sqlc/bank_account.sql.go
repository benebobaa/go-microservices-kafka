// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: bank_account.sql

package sqlc

import (
	"context"
)

const createBankAccountRegistration = `-- name: CreateBankAccountRegistration :one
INSERT INTO bank_account_registration (customer_id, username, email, status, deposit)
VALUES ($1, $2, $3, $4, $5) RETURNING id, customer_id, username, deposit, email, status, created_at, updated_at
`

type CreateBankAccountRegistrationParams struct {
	CustomerID string  `json:"customer_id"`
	Username   string  `json:"username"`
	Email      string  `json:"email"`
	Status     string  `json:"status"`
	Deposit    float64 `json:"deposit"`
}

func (q *Queries) CreateBankAccountRegistration(ctx context.Context, arg CreateBankAccountRegistrationParams) (BankAccountRegistration, error) {
	row := q.db.QueryRowContext(ctx, createBankAccountRegistration,
		arg.CustomerID,
		arg.Username,
		arg.Email,
		arg.Status,
		arg.Deposit,
	)
	var i BankAccountRegistration
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.Username,
		&i.Deposit,
		&i.Email,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findBankAccountRegistrationByUsernameOrEmail = `-- name: FindBankAccountRegistrationByUsernameOrEmail :one
SELECT id, customer_id, username, deposit, email, status, created_at, updated_at FROM bank_account_registration
WHERE username = $1 OR email = $2 LIMIT 1
`

type FindBankAccountRegistrationByUsernameOrEmailParams struct {
	Username string `json:"username"`
	Email    string `json:"email"`
}

func (q *Queries) FindBankAccountRegistrationByUsernameOrEmail(ctx context.Context, arg FindBankAccountRegistrationByUsernameOrEmailParams) (BankAccountRegistration, error) {
	row := q.db.QueryRowContext(ctx, findBankAccountRegistrationByUsernameOrEmail, arg.Username, arg.Email)
	var i BankAccountRegistration
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.Username,
		&i.Deposit,
		&i.Email,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateBankAccountRegistration = `-- name: UpdateBankAccountRegistration :one
UPDATE bank_account_registration
SET
    status = $1,
    updated_at = CURRENT_TIMESTAMP
WHERE
    username = $2 AND email = $3 AND customer_id = $4 RETURNING id, customer_id, username, deposit, email, status, created_at, updated_at
`

type UpdateBankAccountRegistrationParams struct {
	Status     string `json:"status"`
	Username   string `json:"username"`
	Email      string `json:"email"`
	CustomerID string `json:"customer_id"`
}

func (q *Queries) UpdateBankAccountRegistration(ctx context.Context, arg UpdateBankAccountRegistrationParams) (BankAccountRegistration, error) {
	row := q.db.QueryRowContext(ctx, updateBankAccountRegistration,
		arg.Status,
		arg.Username,
		arg.Email,
		arg.CustomerID,
	)
	var i BankAccountRegistration
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.Username,
		&i.Deposit,
		&i.Email,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
