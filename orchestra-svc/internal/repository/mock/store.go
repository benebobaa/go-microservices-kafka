// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/sqlc/store.go
//
// Generated by this command:
//
//	mockgen -source=internal/repository/sqlc/store.go -package mockdb -destination=internal/repository/mock/store.go
//

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	sqlc "orchestra-svc/internal/repository/sqlc"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CheckIfInstanceStepExists mocks base method.
func (m *MockStore) CheckIfInstanceStepExists(ctx context.Context, eventID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIfInstanceStepExists", ctx, eventID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckIfInstanceStepExists indicates an expected call of CheckIfInstanceStepExists.
func (mr *MockStoreMockRecorder) CheckIfInstanceStepExists(ctx, eventID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIfInstanceStepExists", reflect.TypeOf((*MockStore)(nil).CheckIfInstanceStepExists), ctx, eventID)
}

// CreateProcessLog mocks base method.
func (m *MockStore) CreateProcessLog(ctx context.Context, arg sqlc.CreateProcessLogParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProcessLog", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProcessLog indicates an expected call of CreateProcessLog.
func (mr *MockStoreMockRecorder) CreateProcessLog(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProcessLog", reflect.TypeOf((*MockStore)(nil).CreateProcessLog), ctx, arg)
}

// CreateWorkflowInstance mocks base method.
func (m *MockStore) CreateWorkflowInstance(ctx context.Context, arg sqlc.CreateWorkflowInstanceParams) (sqlc.WorkflowInstance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkflowInstance", ctx, arg)
	ret0, _ := ret[0].(sqlc.WorkflowInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkflowInstance indicates an expected call of CreateWorkflowInstance.
func (mr *MockStoreMockRecorder) CreateWorkflowInstance(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkflowInstance", reflect.TypeOf((*MockStore)(nil).CreateWorkflowInstance), ctx, arg)
}

// CreateWorkflowInstanceStep mocks base method.
func (m *MockStore) CreateWorkflowInstanceStep(ctx context.Context, arg sqlc.CreateWorkflowInstanceStepParams) (sqlc.WorkflowInstanceStep, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkflowInstanceStep", ctx, arg)
	ret0, _ := ret[0].(sqlc.WorkflowInstanceStep)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkflowInstanceStep indicates an expected call of CreateWorkflowInstanceStep.
func (mr *MockStoreMockRecorder) CreateWorkflowInstanceStep(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkflowInstanceStep", reflect.TypeOf((*MockStore)(nil).CreateWorkflowInstanceStep), ctx, arg)
}

// FindInstanceStepByEventID mocks base method.
func (m *MockStore) FindInstanceStepByEventID(ctx context.Context, eventID string) (sqlc.WorkflowInstanceStep, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindInstanceStepByEventID", ctx, eventID)
	ret0, _ := ret[0].(sqlc.WorkflowInstanceStep)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindInstanceStepByEventID indicates an expected call of FindInstanceStepByEventID.
func (mr *MockStoreMockRecorder) FindInstanceStepByEventID(ctx, eventID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindInstanceStepByEventID", reflect.TypeOf((*MockStore)(nil).FindInstanceStepByEventID), ctx, eventID)
}

// FindInstanceStepByID mocks base method.
func (m *MockStore) FindInstanceStepByID(ctx context.Context, workflowInstanceID string) ([]sqlc.WorkflowInstanceStep, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindInstanceStepByID", ctx, workflowInstanceID)
	ret0, _ := ret[0].([]sqlc.WorkflowInstanceStep)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindInstanceStepByID indicates an expected call of FindInstanceStepByID.
func (mr *MockStoreMockRecorder) FindInstanceStepByID(ctx, workflowInstanceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindInstanceStepByID", reflect.TypeOf((*MockStore)(nil).FindInstanceStepByID), ctx, workflowInstanceID)
}

// FindPayloadKeysByStepID mocks base method.
func (m *MockStore) FindPayloadKeysByStepID(ctx context.Context, stepID int32) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPayloadKeysByStepID", ctx, stepID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPayloadKeysByStepID indicates an expected call of FindPayloadKeysByStepID.
func (mr *MockStoreMockRecorder) FindPayloadKeysByStepID(ctx, stepID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPayloadKeysByStepID", reflect.TypeOf((*MockStore)(nil).FindPayloadKeysByStepID), ctx, stepID)
}

// FindStepsByTypeAndState mocks base method.
func (m *MockStore) FindStepsByTypeAndState(ctx context.Context, arg sqlc.FindStepsByTypeAndStateParams) ([]sqlc.FindStepsByTypeAndStateRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindStepsByTypeAndState", ctx, arg)
	ret0, _ := ret[0].([]sqlc.FindStepsByTypeAndStateRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindStepsByTypeAndState indicates an expected call of FindStepsByTypeAndState.
func (mr *MockStoreMockRecorder) FindStepsByTypeAndState(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindStepsByTypeAndState", reflect.TypeOf((*MockStore)(nil).FindStepsByTypeAndState), ctx, arg)
}

// FindWorkflowByType mocks base method.
func (m *MockStore) FindWorkflowByType(ctx context.Context, type_ string) (sqlc.Workflow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindWorkflowByType", ctx, type_)
	ret0, _ := ret[0].(sqlc.Workflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindWorkflowByType indicates an expected call of FindWorkflowByType.
func (mr *MockStoreMockRecorder) FindWorkflowByType(ctx, type_ any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindWorkflowByType", reflect.TypeOf((*MockStore)(nil).FindWorkflowByType), ctx, type_)
}

// FindWorkflowInstanceByID mocks base method.
func (m *MockStore) FindWorkflowInstanceByID(ctx context.Context, id string) (sqlc.WorkflowInstance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindWorkflowInstanceByID", ctx, id)
	ret0, _ := ret[0].(sqlc.WorkflowInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindWorkflowInstanceByID indicates an expected call of FindWorkflowInstanceByID.
func (mr *MockStoreMockRecorder) FindWorkflowInstanceByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindWorkflowInstanceByID", reflect.TypeOf((*MockStore)(nil).FindWorkflowInstanceByID), ctx, id)
}

// FindWorkflowInstanceByTypeAndID mocks base method.
func (m *MockStore) FindWorkflowInstanceByTypeAndID(ctx context.Context, arg sqlc.FindWorkflowInstanceByTypeAndIDParams) ([]sqlc.FindWorkflowInstanceByTypeAndIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindWorkflowInstanceByTypeAndID", ctx, arg)
	ret0, _ := ret[0].([]sqlc.FindWorkflowInstanceByTypeAndIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindWorkflowInstanceByTypeAndID indicates an expected call of FindWorkflowInstanceByTypeAndID.
func (mr *MockStoreMockRecorder) FindWorkflowInstanceByTypeAndID(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindWorkflowInstanceByTypeAndID", reflect.TypeOf((*MockStore)(nil).FindWorkflowInstanceByTypeAndID), ctx, arg)
}

// FindWorkflowInstanceStepsByEventIDAndInsID mocks base method.
func (m *MockStore) FindWorkflowInstanceStepsByEventIDAndInsID(ctx context.Context, arg sqlc.FindWorkflowInstanceStepsByEventIDAndInsIDParams) (sqlc.FindWorkflowInstanceStepsByEventIDAndInsIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindWorkflowInstanceStepsByEventIDAndInsID", ctx, arg)
	ret0, _ := ret[0].(sqlc.FindWorkflowInstanceStepsByEventIDAndInsIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindWorkflowInstanceStepsByEventIDAndInsID indicates an expected call of FindWorkflowInstanceStepsByEventIDAndInsID.
func (mr *MockStoreMockRecorder) FindWorkflowInstanceStepsByEventIDAndInsID(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindWorkflowInstanceStepsByEventIDAndInsID", reflect.TypeOf((*MockStore)(nil).FindWorkflowInstanceStepsByEventIDAndInsID), ctx, arg)
}

// UpdateWorkflowInstance mocks base method.
func (m *MockStore) UpdateWorkflowInstance(ctx context.Context, arg sqlc.UpdateWorkflowInstanceParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkflowInstance", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWorkflowInstance indicates an expected call of UpdateWorkflowInstance.
func (mr *MockStoreMockRecorder) UpdateWorkflowInstance(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkflowInstance", reflect.TypeOf((*MockStore)(nil).UpdateWorkflowInstance), ctx, arg)
}

// UpdateWorkflowInstanceStep mocks base method.
func (m *MockStore) UpdateWorkflowInstanceStep(ctx context.Context, arg sqlc.UpdateWorkflowInstanceStepParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkflowInstanceStep", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWorkflowInstanceStep indicates an expected call of UpdateWorkflowInstanceStep.
func (mr *MockStoreMockRecorder) UpdateWorkflowInstanceStep(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkflowInstanceStep", reflect.TypeOf((*MockStore)(nil).UpdateWorkflowInstanceStep), ctx, arg)
}
