// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: workflow_instance.sql

package sqlc

import (
	"context"
	"database/sql"
)

const checkIfInstanceStepExists = `-- name: CheckIfInstanceStepExists :one
SELECT EXISTS(SELECT 1 FROM workflow_instance_steps WHERE event_id = $1) AS exists
`

func (q *Queries) CheckIfInstanceStepExists(ctx context.Context, eventID string) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkIfInstanceStepExists, eventID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createWorkflowInstance = `-- name: CreateWorkflowInstance :one
INSERT INTO workflow_instances (id, workflow_id, status)
VALUES
    ($1, $2, $3) RETURNING id, workflow_id, status, created_at, updated_at
`

type CreateWorkflowInstanceParams struct {
	ID         string `json:"id"`
	WorkflowID int32  `json:"workflow_id"`
	Status     string `json:"status"`
}

func (q *Queries) CreateWorkflowInstance(ctx context.Context, arg CreateWorkflowInstanceParams) (WorkflowInstance, error) {
	row := q.db.QueryRowContext(ctx, createWorkflowInstance, arg.ID, arg.WorkflowID, arg.Status)
	var i WorkflowInstance
	err := row.Scan(
		&i.ID,
		&i.WorkflowID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createWorkflowInstanceStep = `-- name: CreateWorkflowInstanceStep :one
INSERT INTO workflow_instance_steps (workflow_instance_id,event_id, step_id, status, event_message, started_at, completed_at)
VALUES
    ($1, $2, $3, $4, $5, $6, $7) RETURNING id, event_id, workflow_instance_id, step_id, status, event_message, started_at, completed_at
`

type CreateWorkflowInstanceStepParams struct {
	WorkflowInstanceID string         `json:"workflow_instance_id"`
	EventID            string         `json:"event_id"`
	StepID             int32          `json:"step_id"`
	Status             string         `json:"status"`
	EventMessage       sql.NullString `json:"event_message"`
	StartedAt          sql.NullTime   `json:"started_at"`
	CompletedAt        sql.NullTime   `json:"completed_at"`
}

func (q *Queries) CreateWorkflowInstanceStep(ctx context.Context, arg CreateWorkflowInstanceStepParams) (WorkflowInstanceStep, error) {
	row := q.db.QueryRowContext(ctx, createWorkflowInstanceStep,
		arg.WorkflowInstanceID,
		arg.EventID,
		arg.StepID,
		arg.Status,
		arg.EventMessage,
		arg.StartedAt,
		arg.CompletedAt,
	)
	var i WorkflowInstanceStep
	err := row.Scan(
		&i.ID,
		&i.EventID,
		&i.WorkflowInstanceID,
		&i.StepID,
		&i.Status,
		&i.EventMessage,
		&i.StartedAt,
		&i.CompletedAt,
	)
	return i, err
}

const findInstanceStepByID = `-- name: FindInstanceStepByID :many
SELECT id, event_id, workflow_instance_id, step_id, status, event_message, started_at, completed_at FROM workflow_instance_steps
WHERE workflow_instance_id = $1
`

func (q *Queries) FindInstanceStepByID(ctx context.Context, workflowInstanceID string) ([]WorkflowInstanceStep, error) {
	rows, err := q.db.QueryContext(ctx, findInstanceStepByID, workflowInstanceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []WorkflowInstanceStep{}
	for rows.Next() {
		var i WorkflowInstanceStep
		if err := rows.Scan(
			&i.ID,
			&i.EventID,
			&i.WorkflowInstanceID,
			&i.StepID,
			&i.Status,
			&i.EventMessage,
			&i.StartedAt,
			&i.CompletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findWorkflowInstanceByID = `-- name: FindWorkflowInstanceByID :one
SELECT id, workflow_id, status, created_at, updated_at FROM workflow_instances
WHERE id = $1 LIMIT 1
`

func (q *Queries) FindWorkflowInstanceByID(ctx context.Context, id string) (WorkflowInstance, error) {
	row := q.db.QueryRowContext(ctx, findWorkflowInstanceByID, id)
	var i WorkflowInstance
	err := row.Scan(
		&i.ID,
		&i.WorkflowID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateWorkflowInstanceStep = `-- name: UpdateWorkflowInstanceStep :exec
UPDATE workflow_instance_steps
SET
    status = $1,
    event_message = $2,
    completed_at = $3
WHERE
    event_id = $4
`

type UpdateWorkflowInstanceStepParams struct {
	Status       string         `json:"status"`
	EventMessage sql.NullString `json:"event_message"`
	CompletedAt  sql.NullTime   `json:"completed_at"`
	EventID      string         `json:"event_id"`
}

func (q *Queries) UpdateWorkflowInstanceStep(ctx context.Context, arg UpdateWorkflowInstanceStepParams) error {
	_, err := q.db.ExecContext(ctx, updateWorkflowInstanceStep,
		arg.Status,
		arg.EventMessage,
		arg.CompletedAt,
		arg.EventID,
	)
	return err
}
